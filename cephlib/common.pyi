from typing import Union, List, NamedTuple, Iterator, Callable, TypeVar, Iterable, Tuple

CmdResult = NamedTuple("CmdResult", [("code", int), ("out", bytes)])

def float2str(val: Union[int, float], digits: int = 3) -> str: ...
def floats2str(vals: List[Union[int, float]], digits: int = 3, width: int = 8) -> str: ...
def check_output(cmd: str, log: bool = True, input: bytes = None, out_limit: int = 200) -> bytes: ...
def check_output_ssh(host: str , ssh_opts: str, cmd: str, no_retry: bool = False, max_retry: int = 3,
                     input: bytes = None, out_limit: int = 200) -> bytes: ...
def run_ssh(host: str, ssh_opts: str, cmd: str, no_retry: bool = False, max_retry: int = 3,
            input: bytes = None) -> CmdResult: ...


InpType = TypeVar('InpType')
FuncResType = TypeVar('FuncResType')

def pmap(func: Callable[[InpType], FuncResType],
         data: Iterable[InpType],
         thcount: int = 32) -> Iterator[Tuple[bool, FuncResType]]: ...
